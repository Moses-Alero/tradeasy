// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
  binaryTargets   = ["native"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Vendor {
  id                 String        @id @default(uuid())
  businessName       String
  firstName          String
  lastName           String        @default("")
  email              String        @unique
  country            String?       @default("Nigeria")
  password           String
  address            String?
  city               String?
  state              String?
  zip                String?
  phone              String
  website            String?
  cac                String?
  OTP                String?
  isAccountVerified  Boolean       @default(false)
  isBusinessVerified Boolean       @default(false)
  transactionPin     String?
  businessType       VENDOR_TYPE   @default(INDIVIDUAL)
  createdAt          DateTime      @default(now())
  updatedAt          DateTime      @updatedAt
  isDeleted          Boolean       @default(false)
  clients            Client[]
  invoices           Invoice[]
  wallet             Wallet?       @relation("vendor")
  transactions       Transaction[]
  ActivityLog        ActivityLog[]

  @@map("vendor")
}

model Client {
  id             String        @id @default(uuid())
  fullname       String
  email          String
  phone          String
  companyName    String?
  billingAddress String?
  paymentType    String?
  clientType     CLIENT_TYPE
  isDeleted      Boolean       @default(false)
  vendorId       String
  createdBy      Vendor        @relation(fields: [vendorId], references: [id])
  invoices       Invoice[]
  invoiceItems   InvoiceItem[]

  @@map("client_profile")
}

model Invoice {
  id           String         @id @default(uuid())
  invoiceNo    String         @unique
  createdAt    DateTime       @default(now())
  description  String?        @default("Purchase of goods and services")
  totalAmount  Float
  issuedAt     DateTime       @default(now())
  dueDate      DateTime?      @default(now())
  status       INVOICE_STATUS @default(DRAFT)
  isDeleted    Boolean        @default(false)
  vendorId     String
  issuedBy     Vendor         @relation(fields: [vendorId], references: [id])
  clientId     String
  issuedTo     Client         @relation(fields: [clientId], references: [id])
  invoiceItems InvoiceItem[]

  @@map("invoice")
}

model InvoiceItem {
  id        String  @id @default(uuid())
  item      String
  quantity  Int
  unitPrice Float
  invoiceId String
  invoice   Invoice @relation(fields: [invoiceId], references: [id])
  clientId  String
  client    Client  @relation(fields: [clientId], references: [id])

  @@map("invoice_item")
}

model Wallet {
  id              String    @id @default(uuid())
  balance         Decimal   @default(0) @db.Decimal(20, 2)
  currency        CURRENCY  @default(NGN)
  totalWithdrawal Decimal   @default(0) @db.Decimal(20, 2)
  totalCredit     Decimal   @default(0) @db.Decimal(20, 2)
  vendorId        String    @unique
  is_deleted      Boolean   @default(false)
  createdAt       DateTime  @default(now()) @map("created_at")
  updatedAt       DateTime  @updatedAt @map("updated_at")
  deletedAt       DateTime? @map("deleted_at")
  vendor          Vendor    @relation("vendor", fields: [vendorId], references: [id])

  @@map("wallet")
}

model Transaction {
  id            String                 @id @default(uuid())
  reference_id  String                 @db.VarChar
  amount        Decimal                @default(0) @db.Decimal(20, 2)
  title         String?
  message       String?
  chargedAmount Decimal?               @db.Decimal(20, 2)
  status        TransactionStatus?     @default(PENDING)
  type          TransactionType?       @default(CREDIT)
  chargeType    TransactionChargeType? @default(CARD)
  currencyId    String?                @map("currency_id")
  senderId      String?                @map("sender_id")
  recipientId   String?                @map("recipient_id")
  vendorId      String?
  isDeleted     Boolean                @default(false)
  createdAt     DateTime               @default(now())
  updatedAt     DateTime               @updatedAt
  deletedAt     DateTime?
  currency      CURRENCY               @default(NGN)
  vendor        Vendor?                @relation(fields: [vendorId], references: [id])

  @@map("transactions")
}

model ActivityLog {
  id        String   @id @default(uuid())
  action    ACTIVITY
  message   String
  vendorId  String
  vendor    Vendor   @relation(fields: [vendorId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum VENDOR_TYPE {
  INDIVIDUAL
  ORGANIZATION
}

enum CLIENT_TYPE {
  INDIVIDUAL
  BUSINESS
  GOVERNMENT
}

enum INVOICE_STATUS {
  DRAFT
  SENT
  PAID
  OVERDUE
  DISPUTE
}

enum CURRENCY {
  NGN
  USD
  GBP
  EUR
}

enum ACTIVITY {
  WITHDRAWAL
  PAYMENT
  INVOICE
}

enum TransactionChargeType {
  CARD
}

enum TransactionStatus {
  PENDING
  APPROVED
  CANCELED
  HOLD
  FAILED
  COMPLETED
}

enum TransactionType {
  CREDIT
  DEBIT
}
